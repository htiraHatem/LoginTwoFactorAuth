//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoginTwoFactorAuth.ServiceReferenceTFA {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceTFA.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WcfServiceTFA.CompositeType GetDataUsingDataContract(WcfServiceTFA.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfServiceTFA.CompositeType> GetDataUsingDataContractAsync(WcfServiceTFA.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Hello", ReplyAction="http://tempuri.org/IService1/HelloResponse")]
        string Hello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Hello", ReplyAction="http://tempuri.org/IService1/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/rechPSK", ReplyAction="http://tempuri.org/IService1/rechPSKResponse")]
        string rechPSK(string login, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/rechPSK", ReplyAction="http://tempuri.org/IService1/rechPSKResponse")]
        System.Threading.Tasks.Task<string> rechPSKAsync(string login, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidOTP", ReplyAction="http://tempuri.org/IService1/ValidOTPResponse")]
        bool ValidOTP(string login, string pwd, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidOTP", ReplyAction="http://tempuri.org/IService1/ValidOTPResponse")]
        System.Threading.Tasks.Task<bool> ValidOTPAsync(string login, string pwd, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/inscription", ReplyAction="http://tempuri.org/IService1/inscriptionResponse")]
        string inscription(string username, string lastname, string login, string pwd, string adresse, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/inscription", ReplyAction="http://tempuri.org/IService1/inscriptionResponse")]
        System.Threading.Tasks.Task<string> inscriptionAsync(string username, string lastname, string login, string pwd, string adresse, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LoginTwoFactorAuth.ServiceReferenceTFA.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LoginTwoFactorAuth.ServiceReferenceTFA.IService1>, LoginTwoFactorAuth.ServiceReferenceTFA.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceTFA.CompositeType GetDataUsingDataContract(WcfServiceTFA.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfServiceTFA.CompositeType> GetDataUsingDataContractAsync(WcfServiceTFA.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string Hello() {
            return base.Channel.Hello();
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync() {
            return base.Channel.HelloAsync();
        }
        
        public string rechPSK(string login, string pwd) {
            return base.Channel.rechPSK(login, pwd);
        }
        
        public System.Threading.Tasks.Task<string> rechPSKAsync(string login, string pwd) {
            return base.Channel.rechPSKAsync(login, pwd);
        }
        
        public bool ValidOTP(string login, string pwd, string token) {
            return base.Channel.ValidOTP(login, pwd, token);
        }
        
        public System.Threading.Tasks.Task<bool> ValidOTPAsync(string login, string pwd, string token) {
            return base.Channel.ValidOTPAsync(login, pwd, token);
        }
        
        public string inscription(string username, string lastname, string login, string pwd, string adresse, string email) {
            return base.Channel.inscription(username, lastname, login, pwd, adresse, email);
        }
        
        public System.Threading.Tasks.Task<string> inscriptionAsync(string username, string lastname, string login, string pwd, string adresse, string email) {
            return base.Channel.inscriptionAsync(username, lastname, login, pwd, adresse, email);
        }
    }
}
